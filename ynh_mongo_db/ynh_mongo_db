#!/bin/bash

# Evaluate a mongo command
#
# example: ynh_mongo_eval_as --command='db.getMongo().getDBNames().indexOf("wekan")'
# example: ynh_mongo_eval_as --command="db.getMongo().getDBNames().indexOf(\"wekan\")"
#
# usage: ynh_mongo_eval_as [--user=user] [--password=password] [--database=database] [--host=host] [--port=port] --command="command"
# | arg: -u, --user=        - the user name to connect as
# | arg: -p, --password=    - the user password
# | arg: -d, --database=    - the database to connect to
# | arg: -h, --host=        - the host to connect to
# | arg: -P, --port=        - the port to connect to
# | arg: -c, --command=     - the command to evaluate
#
#
ynh_mongo_eval_as() {
    # Declare an array to define the options of this helper.
    local legacy_args=updhPc
    local -A args_array=( [u]=user= [p]=password= [d]=database= [h]=host= [P]=port= [c]=command= )
    local user
    local password
    local database
    local host
    local port
    local command
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    user="${user:-}"
    password="${password:-}"
    database="${database:-}"
    host="${host:-}"
    port="${port:-}"

    # If user is provided
    if [ -n "$user" ]
    then
        user="--username=$user"
        
        # If password is provided
        if [ -n "$password" ]
        then
            password="--password=$password"
        fi

        # If database is provided
        if [ -n "$database" ]
        then
            database="--authenticationDatabase=$database"
        fi
    else
        password=""
        database=""
    fi

    # If host is provided
    if [ -n "$host" ]
    then
        host="--host=$host"
    fi

    # If host is provided
    if [ -n "$port" ]
    then
        port="--port=$port"
    fi

    mongo --quiet $user $password $database $host $port --eval="$command"
}

# Create a database and grant optionnaly privilegies to a user
#
# [internal]
#
# usage: ynh_mongo_create_db db_name [db_user]
# | arg: db_name - the database name to create
# | arg: db_user - the user to grant privilegies
#
#
ynh_mongo_create_db() {
    local db_name=$1
    local db_user=$2

    # Set the user as admin of the db
    ynh_mongo_eval_as --database="$db_name" --command='db.grantRolesToUser("'${db_user}'",[{ role: "clusterMonitor", db: "admin" }]);'
}

# Drop a database
#
# [internal]
#
# If you intend to drop the database *and* the associated user,
# consider using ynh_mongo_remove_db instead.
#
# usage: ynh_mongo_drop_db -database=db
# | arg: -d, --database=    - the database name to drop
#
#
ynh_mongo_drop_db() {
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    ynh_mongo_eval_as --database="${database}" --command='db.runCommand({dropDatabase: 1})'
}

# Dump a database
#
# example: ynh_mongo_dump_db --database=wekan > ./dump.bson
#
# usage: ynh_mongo_dump_db --database=database
# | arg: -d, --database=    - the database name to dump
# | ret: the mongodump output
#
#
ynh_mongo_dump_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    mongodump --quiet --db="$database" --archive
}

# Create a user
#
# [internal]
#
# usage: ynh_mongo_create_user user pwd [host]
# | arg: user - the user name to create
# | arg: pwd - the password to identify user by
#
#
ynh_mongo_create_user() {
    ynh_mongo_eval_as --command='db.createUser( { user: "'${1}'", pwd: "'${2}'", roles: [ "readWrite" ] } );'
}

# Check if a mongo database exists
#
# usage: ynh_mongo_database_exists --database=database
# | arg: -d, --database=    - the database for which to check existence
# | exit: Return 1 if the database doesn't exist, 0 otherwise
#
#
ynh_mongo_database_exists() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=([d]=database=)
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if [ $(ynh_mongo_eval_as --command='db.getMongo().getDBNames().indexOf("'${database}'")') -lt 0 ]
    then
        return 0
    else
        return 1
    fi
}

# Restore a database
#
# example: ynh_mongo_restore_db --database=wekan < ./dump.bson
#
# usage: ynh_mongo_restore_db --database=database
# | arg: -d, --database=    - the database name to restore
#
#
ynh_mongo_restore_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    mongorestore --quiet --db="$database" --archive
}

# Drop a user
#
# [internal]
#
# usage: ynh_mongo_drop_user --db_user=user
# | arg: -u, --db_user=     -the user to drop
#
#
ynh_mongo_drop_user() {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=( [u]=db_user= )
    local db_user
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    ynh_mongo_eval_as --command='db.dropUser("'${db_user}'", {w: "majority", wtimeout: 5000})'
}

# Create a database, an user and its password. Then store the password in the app's config
#
# usage: ynh_mongo_setup_db --db_user=user --db_name=name [--db_pwd=pwd]
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
# | arg: -p, --db_pwd=      - Password of the database. If not provided, a password will be generated
#
# After executing this helper, the password of the created database will be available in $db_pwd
# It will also be stored as "mongopwd" into the app settings.
#
#
ynh_mongo_setup_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=( [u]=db_user= [n]=db_name= [p]=db_pwd= )
    local db_user
    local db_name
    local db_pwd
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local new_db_pwd=$(ynh_string_random) # Generate a random password
    # If $db_pwd is not provided, use new_db_pwd instead for db_pwd
    db_pwd="${db_pwd:-$new_db_pwd}"
    
    ynh_mongo_create_user "$db_user" "$db_pwd"  # Create the user
    
    ynh_mongo_create_db "$db_name" "$db_user"	# Create the database
    ynh_app_setting_set --app=$app --key=mongopwd --value=$db_pwd # Store the password in the app's config
}

# Remove a database if it exists, and the associated user
#
# usage: ynh_mongo_remove_db --db_user=user --db_name=name
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
#
#
ynh_mongo_remove_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=un
    local -A args_array=( [u]=db_user= [n]=db_name= )
    local db_user
    local db_name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if ynh_mongo_database_exists --database=$db_name
    then # Check if the database exists
        ynh_mongo_drop_db --database="$db_name"  # Remove the database
    else
        ynh_print_warn --message="Database $db_name not found"
    fi

    # Remove mongo user if it exists
    ynh_mongo_drop_user --db_user=$db_user
}
