#!/bin/bash

# Create a dedicated config file from a template
#
# usage: ynh_add_config --template="template" --destination="destination file"
# | arg: -t, --template=     - Template config file to use
# | arg: -d, --destination=    - Destination of the config file
#
# This will use the template $template to generate a config file
# $destination by replacing the following keywords with global variables
# that should be defined before calling this helper :
#   __PATH__      by  $path_url
#   __NAME__    by $app
#   __NAMETOCHANGE__    by $app
#   __USER__    by $app
#   __FINALPATH__    by $final_path
#   __PHPVERSION__    by $YNH_PHP_VERSION
#
# And any dynamic variables that should be defined before calling this helper like:
#   __DOMAIN__    by $domain
#   __APP__    by $app
#   __VAR_1__    by $var_1
#   __VAR_2__    by $var_2
#
# The helper will verify the checksum and backup the destination file
# if it's different before applying the new template.
# And it will calculate and store a destination file checksum
# into the app settings when configuraation is done.
#
ynh_add_config () {
    # Declare an array to define the options of this helper.
    local legacy_args=tdv
    local -A args_array=( [t]=template= [d]=destination= )
    local template
    local destination
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    ynh_backup_if_checksum_is_different --file="$destination"

    cp "$template" "$destination"

    ynh_replace_vars --file="$destination"

    ynh_store_file_checksum --file="$destination"
}

# Replace variables in a file
#
# usage: ynh_replace_vars --file="file"
# | arg: -f, --file=     - File where to replace variables
#
# The helper will replace the following keywords with global variables
# that should be defined before calling this helper :
#   __PATH__      by  $path_url
#   __NAME__    by $app
#   __NAMETOCHANGE__    by $app
#   __USER__    by $app
#   __FINALPATH__    by $final_path
#   __PHPVERSION__    by $YNH_PHP_VERSION
#
# And any dynamic variables that should be defined before calling this helper like:
#   __DOMAIN__    by $domain
#   __APP__    by $app
#   __VAR_1__    by $var_1
#   __VAR_2__    by $var_2
#
#
ynh_replace_vars () {
    # Declare an array to define the options of this helper.
    local legacy_args=f
    local -A args_array=( [f]=file= )
    local file
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    # Replace specific YunoHost variables
    if test -n "${path_url:-}"
    then
        # path_url_slash_less is path_url, or a blank value if path_url is only '/'
        local path_url_slash_less=${path_url%/}
        ynh_replace_string --match_string="__PATH__/" --replace_string="$path_url_slash_less/" --target_file="$file"
        ynh_replace_string --match_string="__PATH__" --replace_string="$path_url" --target_file="$file"
    fi
    if test -n "${app:-}"; then
        ynh_replace_string --match_string="__NAME__" --replace_string="$app" --target_file="$file"
        ynh_replace_string --match_string="__NAMETOCHANGE__" --replace_string="$app" --target_file="$file"
        ynh_replace_string --match_string="__USER__" --replace_string="$app" --target_file="$file"
    fi
    if test -n "${final_path:-}"; then
        ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$file"
    fi
    if test -n "${YNH_PHP_VERSION:-}"; then
        ynh_replace_string --match_string="__PHPVERSION__" --replace_string="$YNH_PHP_VERSION" --target_file="$file"
    fi

    # Replace othes variables
    
    # List other unique (__ __) variables in $file
    local uniques_vars=( $(grep -o '__[^.]*__' $file | sort --unique | sed "s@__\([^.]*\)__@\L\1@g" ))

    # Do the replacement
    for one_var in "${uniques_vars[@]}"
    do
        if test -n "${!one_var:-}"; then
            ynh_replace_string --match_string="__${one_var^^}__" --replace_string="${!one_var}" --target_file="$file"
        else
            ynh_die --message="\$$one_var wasn't initialized when trying to replace __${one_var^^}__ in $file"
        fi
    done
}